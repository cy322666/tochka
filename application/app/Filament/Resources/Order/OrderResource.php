<?php

namespace App\Filament\Resources\Order;

use App\Filament\Resources\Order\OrderResource\Pages\ListOrder;
use App\Models\Docs\Doc;
use App\Models\Platform\Order;
use Carbon\Carbon;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\SoftDeletingScope;
use Illuminate\Support\Facades\Artisan;

class OrderResource extends Resource
{
    protected static ?string $model = Order::class;

    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';

    public static function getEloquentQuery(): Builder
    {
        return parent::getEloquentQuery()->orderByDesc('id'); // TODO: Change the autogenerated stub
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('email')
                    ->label('Почта'),
                Tables\Columns\TextColumn::make('created_at')
                    ->label('Создан')
                    ->dateTime()
                    ->sortable(),
                Tables\Columns\TextColumn::make('updated_at')
                    ->label('Обновлен')
                    ->dateTime()
                    ->sortable()
                    ->toggledHiddenByDefault(false),
                Tables\Columns\TextColumn::make('lead_id')
                    ->url(fn(Order $order) => 'https://matematikandrei.amocrm.ru/leads/detail/'.$order->lead_id)
                    ->label('Сделка')
                    ->openUrlInNewTab(),
                Tables\Columns\TextColumn::make('contact_id')
                    ->url(fn(Order $order) => 'https://matematikandrei.amocrm.ru/contacts/detail/'.$order->contact_id)
                    ->label('Контакт')
                    ->openUrlInNewTab(),
                Tables\Columns\TextColumn::make('cost_money')
                    ->label('Стоимость')
                    ->summarize(Tables\Columns\Summarizers\Summarizer::make()),
                Tables\Columns\TextColumn::make('staff')
                    ->label('Менеджер'),
                Tables\Columns\TextColumn::make('is_first')
                    ->label('Первичный'),
                Tables\Columns\TextColumn::make('is_payed')
                    ->label('Оплачен'),
            ])
            ->filters([

                Tables\Filters\Filter::make('is_first')
                    ->label('Первичные')
                    ->query(
                        fn (Builder $query): Builder => $query->where('is_first', true)
                    ),

                Tables\Filters\Filter::make('is_payed')
                    ->label('Оплаченные')
                    ->query(
                        fn (Builder $query): Builder => $query->where('is_payed', true)
                    ),

                Tables\Filters\Filter::make('no_staff')
                    ->label('Самооплаты')
                    ->query(
                        fn (Builder $query): Builder => $query->where('staff',null)
                    ),


                Tables\Filters\Filter::make('today')
                    ->label('За сегодня')
                    ->query(fn (Builder $query): Builder => $query
                        ->whereBetween('updated_at',[
                                Carbon::now()->format('Y-m-d'),
                                Carbon::now()->addDay()->format('Y-m-d'),
                            ]
                        )
                    ),

                Tables\Filters\Filter::make('yesterday')
                    ->label('За вчера')
                    ->query(fn (Builder $query): Builder => $query
                        ->whereBetween('updated_at',[
                                Carbon::now()->subDay()->format('Y-m-d'),
                                Carbon::now()->format('Y-m-d'),
                            ]
                        )
                    ),

                Tables\Filters\SelectFilter::make('first')
                    ->label('Сотрудники')
                    ->options(fn () => Order::query()
                        ->select(['staff', 'id'])
                        ->where('staff', '!=', null)
                        ->get()
                        ->unique('staff')
                        ->pluck('staff', 'id')
                        ->toArray()
                    ),
//                    ->query(
//                        fn ($staff) => Order::query()
//                    ),

                Tables\Filters\Filter::make('created_at')
                    ->label('За период')
                    ->form([
                        Forms\Components\DatePicker::make('created_from')
                            ->label('Созданы от'),
                        Forms\Components\DatePicker::make('created_until')
                            ->label('Созданы до'),
                    ])
                    ->query(function (Builder $query, array $data): Builder {
                        return $query
                            ->when(
                                $data['created_from'],
                                fn (Builder $query, $date): Builder => $query->whereDate('created_at', '>=', $date),
                            )
                            ->when(
                                $data['created_until'],
                                fn (Builder $query, $date): Builder => $query->whereDate('created_at', '<=', $date),
                            );
                    })
            ])
            ->actions([
//                Tables\Actions\Action::make('download')
//                    ->label('')
//                    ->icon('heroicon-o-arrow-down')
//                    ->url(fn (Order $record) => $record->lead_id)
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\Action::make('run_job')
                        ->label('Перевыгрузить выбранные')
                        ->accessSelectedRecords()
                        ->action(function (Order $record, Collection $selectedRecords) {

                            sleep(2);

                            $selectedRecords->each(
                                fn (Order $selectedRecord) => Artisan::call('platform:send-order', ['order_id' => $selectedRecord->id])
                            );
                        }),
                ]),
            ])
            ->paginated([30, 50, 100, 'all']);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => \App\Filament\Resources\Order\OrderResource\Pages\ListOrder::route('/'),
//            'create' => Pages\CreateDoc::route('/create'),
//            'edit' => Pages\EditDoc::route('/{record}/edit'),
        ];
    }
}
